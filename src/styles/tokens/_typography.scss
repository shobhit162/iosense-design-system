@use "sass:map";

// Convert px to rem function
@function pxToRem($px) {
  @return calc($px / 16) + rem;
}

// Breakpoints
$breakpoint-mobile: 768px;

* {
  font-family: 'Noto Sans', sans-serif;    // to be confirmed later
}

// Font Family
$font-family: (
  'text': ('Noto Sans', sans-serif)
);

// ============================================ Font Size SCSS Start ============================================================

// Global Font Sizes
$global-font-size: (
  'global-fz-10': 10,
  'global-fz-12': 12,
  'global-fz-14': 14,
  'global-fz-16': 16,
  'global-fz-18': 18,
  'global-fz-20': 20,
  'global-fz-24': 24,
  'global-fz-32': 32,
  'global-fz-34': 34,
  'global-fz-36': 36,
  'global-fz-38': 38,
  'global-fz-40': 40,
  'global-fz-48': 48,
  'global-fz-56': 56,
  'global-fz-64': 64,
  'global-fz-72': 72
);

// Global Font Size Classes
// These are base utility classes for direct font-size application
@each $size-key, $size-value in $global-font-size {
  .#{$size-key} {
    font-size: pxToRem($size-value);
  }
}

@function get-font-size($size) {
  @return map.get($global-font-size, $size);
}

// Font Size Scale Classes
// These are semantic classes that map to different sizes on desktop and mobile
$font-scale: (
  "font-size-25": (
    desktop: get-font-size(global-fz-10),
    mobile: get-font-size(global-fz-10)
  ),
  "font-size-50": (
    desktop: get-font-size(global-fz-12),
    mobile: get-font-size(global-fz-12)
  ),
  "font-size-100": (
    desktop: get-font-size(global-fz-14),
    mobile: get-font-size(global-fz-14)
  ),
  "font-size-200": (
    desktop: get-font-size(global-fz-16),
    mobile: get-font-size(global-fz-16)
  ),
  "font-size-300": (
    desktop: get-font-size(global-fz-18),
    mobile: get-font-size(global-fz-16)
  ),
  "font-size-400": (
    desktop: get-font-size(global-fz-20),
    mobile: get-font-size(global-fz-18)
  ),
  "font-size-500": (
    desktop: get-font-size(global-fz-24),
    mobile: get-font-size(global-fz-20)
  ),
  "font-size-600": (
    desktop: get-font-size(global-fz-32),
    mobile: get-font-size(global-fz-24)
  ),
  "font-size-700": (
    desktop: get-font-size(global-fz-40),
    mobile: get-font-size(global-fz-32)
  ),
  "font-size-800": (
    desktop: get-font-size(global-fz-48),
    mobile: get-font-size(global-fz-34)
  ),
  "font-size-900": (
    desktop: get-font-size(global-fz-56),
    mobile: get-font-size(global-fz-36)
  ),
  "font-size-1000": (
    desktop: get-font-size(global-fz-64),
    mobile: get-font-size(global-fz-38)
  ),
  "font-size-1100": (
    desktop: get-font-size(global-fz-72),
    mobile: get-font-size(global-fz-40)
  )
);

// Generate responsive font-size classes
@each $class, $sizes in $font-scale {
  .#{$class} {
    font-size: pxToRem(map.get($sizes, desktop));

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      font-size: pxToRem(map.get($sizes, mobile));
    }
  }
}

// ===================================================== Line Height SCSS Start ==========================================================

// Global Line Heights
$global-line-height: (
  'global-lh-00': 0,
  'global-lh-14': 14,
  'global-lh-16': 16,
  'global-lh-18': 18,
  'global-lh-20': 20,
  'global-lh-22': 22,
  'global-lh-24': 24,
  'global-lh-26': 26,
  'global-lh-32': 32,
  'global-lh-38': 38,
  'global-lh-42': 42,
  'global-lh-46': 46,
  'global-lh-48': 48,
  'global-lh-56': 56,
  'global-lh-64': 64,
  'global-lh-70': 70,
  'global-lh-78': 78
);

// Global Line Height Classes
@each $size-key, $size-value in $global-line-height {
  .#{$size-key} {
    line-height: if($size-value == 0, 0, pxToRem($size-value));
  }
}

@function get-line-height($size) {
  @return map.get($global-line-height, $size);
}

// Line Height Scale
$line-height-scale: (
  'line-height-00': (
    desktop: get-line-height(global-lh-00),
    mobile: get-line-height(global-lh-00)
  ),
  'line-height-25': (
    desktop: get-line-height(global-lh-14),
    mobile: get-line-height(global-lh-14)
  ),
  'line-height-50': (
    desktop: get-line-height(global-lh-16),
    mobile: get-line-height(global-lh-16)
  ),
  'line-height-75': (
    desktop: get-line-height(global-lh-18),
    mobile: get-line-height(global-lh-18)
  ),
  'line-height-100': (
    desktop: get-line-height(global-lh-20),
    mobile: get-line-height(global-lh-20)
  ),
  'line-height-200': (
    desktop: get-line-height(global-lh-24),
    mobile: get-line-height(global-lh-24)
  ),
  'line-height-300': (
    desktop: get-line-height(global-lh-24),
    mobile: get-line-height(global-lh-22)
  ),
  'line-height-400': (
    desktop: get-line-height(global-lh-26),
    mobile: get-line-height(global-lh-24)
  ),
  'line-height-500': (
    desktop: get-line-height(global-lh-32),
    mobile: get-line-height(global-lh-26)
  ),
  'line-height-600': (
    desktop: get-line-height(global-lh-38),
    mobile: get-line-height(global-lh-32)
  ),
  'line-height-700': (
    desktop: get-line-height(global-lh-46),
    mobile: get-line-height(global-lh-38)
  ),
  'line-height-800': (
    desktop: get-line-height(global-lh-56),
    mobile: get-line-height(global-lh-42)
  ),
  'line-height-900': (
    desktop: get-line-height(global-lh-64),
    mobile: get-line-height(global-lh-42)
  ),
  'line-height-1000': (
    desktop: get-line-height(global-lh-70),
    mobile: get-line-height(global-lh-46)
  ),
  'line-height-1100': (
    desktop: get-line-height(global-lh-78),
    mobile: get-line-height(global-lh-48)
  )
);

// Generate responsive line-height classes
@each $class, $sizes in $line-height-scale {
  .#{$class} {
    line-height: if(
        map.get($sizes, desktop) == 0,
        0,
        pxToRem(map.get($sizes, desktop))
      );

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      line-height: if(
        map.get($sizes, mobile) == 0,
        0,
        pxToRem(map.get($sizes, mobile))
      );
    }
  }
}

// ================================================= Letter Spacing SCSS Start ===================================================

// Global Letter Spacing
$global-letter-spacing: (
  'global-ls-compressed': -2px,
  'global-ls-condensed': -1px,
  'global-ls-normal': normal,
  'global-ls-expanded': 1px,
  'global-ls-extended': 2px
);

// Global Letter Spacing Classes
@each $name, $value in $global-letter-spacing {
  .#{$name} {
    letter-spacing: $value;
  }
}

@function get-letter-spacing($type) {
  @return map.get($global-letter-spacing, $type);
}

// Letter Spacing Scale
$letter-spacing-scale: (
  'letter-spacing-50': (
    desktop: get-letter-spacing(global-ls-condensed),
    mobile: get-letter-spacing(global-ls-condensed)
  ),
  'letter-spacing-100': (
    desktop: get-letter-spacing(global-ls-normal),
    mobile: get-letter-spacing(global-ls-normal)
  )
);

// Generate Letter Spacing Scale Classes
@each $class, $scales in $letter-spacing-scale {
  .#{$class} {
    letter-spacing: map.get($scales, desktop);

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      letter-spacing: map.get($scales, mobile);
    }
  }
}

// ====================================================== Font Weight SCSS Start =========================================================

// Global Font Weights
$global-font-weight: (
  'global-fw-100': ('name': 'Thin', 'value': 100),
  'global-fw-200': ('name': 'ExtraLight', 'value': 200),
  'global-fw-300': ('name': 'Light', 'value': 300),
  'global-fw-400': ('name': 'Regular', 'value': 400),
  'global-fw-500': ('name': 'Medium', 'value': 500),
  'global-fw-600': ('name': 'SemiBold', 'value': 600),
  'global-fw-700': ('name': 'Bold', 'value': 700),
  'global-fw-800': ('name': 'ExtraBold', 'value': 800),
  'global-fw-900': ('name': 'Black', 'value': 900)
);

// Global Font Weight Classes
@each $weight-key, $weight-data in $global-font-weight {
  .#{$weight-key} {
    font-weight: map.get($weight-data, 'value');
  }
}

@function get-font-weight($weight) {
  @return map.get(map.get($global-font-weight, $weight), 'value');
}

// Font Weight Scale
$font-weight-scale: (
  'font-weight-400': (
    desktop: get-font-weight(global-fw-400),
    mobile: get-font-weight(global-fw-400)
  ),
  'font-weight-500': (
    desktop: get-font-weight(global-fw-500),
    mobile: get-font-weight(global-fw-500)
  ),
  'font-weight-600': (
    desktop: get-font-weight(global-fw-600),
    mobile: get-font-weight(global-fw-600)
  ),
  'font-weight-700': (
    desktop: get-font-weight(global-fw-700),
    mobile: get-font-weight(global-fw-700)
  )
);

// Generate Font Weight Scale Classes
@each $class, $weights in $font-weight-scale {
  .#{$class} {
    font-weight: map.get($weights, desktop);

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      font-weight: map.get($weights, mobile);
    }
  }
}

// ====================================================== Paragraph Spacing SCSS Start ======================================================

// Global Paragraph Spacing
$global-paragraph-spacing: (
  'global-ps-00': 0,
  'global-ps-08': 8,
  'global-ps-10': 10,
  'global-ps-11': 11,
  'global-ps-12': 12
);

// Global Paragraph Spacing Classes
@each $size-key, $size-value in $global-paragraph-spacing {
  .#{$size-key} {
    margin-bottom: pxToRem($size-value);
  }
}

@function get-paragraph-spacing($size) {
  @return map.get($global-paragraph-spacing, $size);
}

// Paragraph Spacing Scale
$paragraph-spacing-scale: (
  'paragraph-spacing-00': (
    desktop: get-paragraph-spacing(global-ps-00),
    mobile: get-paragraph-spacing(global-ps-00)
  ),
  'paragraph-spacing-100': (
    desktop: get-paragraph-spacing(global-ps-08),
    mobile: get-paragraph-spacing(global-ps-08)
  ),
  'paragraph-spacing-200': (
    desktop: get-paragraph-spacing(global-ps-10),
    mobile: get-paragraph-spacing(global-ps-10)
  ),
  'paragraph-spacing-300': (
    desktop: get-paragraph-spacing(global-ps-11),
    mobile: get-paragraph-spacing(global-ps-11)
  ),
  'paragraph-spacing-400': (
    desktop: get-paragraph-spacing(global-ps-12),
    mobile: get-paragraph-spacing(global-ps-12)
  )
);

// Generate Paragraph Spacing Scale Classes
@each $class, $spacings in $paragraph-spacing-scale {
  .#{$class} {
    margin-bottom: pxToRem(map.get($spacings, desktop));

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      margin-bottom: pxToRem(map.get($spacings, mobile));
    }
  }
}

// ====================================================== List Spacing SCSS Start ================================================

// Global List Spacing
$global-list-spacing: (
  'global-lis-00': 0,
  'global-lis-04': 4,
  'global-lis-08': 8,
  'global-lis-12': 12,
  'global-lis-16': 16,
  'global-lis-20': 20,
  'global-lis-24': 24
);

// Global List Spacing Classes
@each $size-key, $size-value in $global-list-spacing {
  .#{$size-key} {
    gap: pxToRem($size-value);
    
    // For traditional lists (ul, ol)
    &.list-traditional {
      > li + li {
        margin-top: pxToRem($size-value);
      }
    }
    
    // For flex/grid lists
    &.list-flex {
      display: flex;
      flex-direction: column;
    }
    
    &.list-grid {
      display: grid;
    }
  }
}

@function get-list-spacing($size) {
  @return map.get($global-list-spacing, $size);
}

// List Spacing Scale
$list-spacing-scale: (
  'list-spacing-00': (
    desktop: get-list-spacing(global-lis-00),
    mobile: get-list-spacing(global-lis-00)
  ),
  'list-spacing-100': (
    desktop: get-list-spacing(global-lis-08),
    mobile: get-list-spacing(global-lis-08)
  )
);

// Generate List Spacing Scale Classes
@each $class, $spacings in $list-spacing-scale {
  .#{$class} {
    gap: pxToRem(map.get($spacings, desktop));
      
    // For traditional lists
    &.list-traditional {
      > li + li {
        margin-top: pxToRem(map.get($spacings, desktop));
      }
    }

    // Mobile styles
    @media screen and (max-width: $breakpoint-mobile) {
      gap: pxToRem(map.get($spacings, mobile));
      
      // For traditional lists
      &.list-traditional {
        > li + li {
          margin-top: pxToRem(map.get($spacings, mobile));
        }
      }
    }
  }
}


// ===================================================== Type Scale Tokens (as per figma) ==============================================

// Type Scale Tokens - Large Screen (Desktop)
$type-scale-large: (
  // Display Types
  'DisplayXLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-1100',        // 72px/40px
    line-height: 'line-height-1100',     // 78px/48px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-50',  // -1px for 400,500; normal for 600
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'DisplayLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-1000',        // 64px/38px
    line-height: 'line-height-1000',     // 70px/46px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-50',
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'DisplayMedium': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-900',         // 56px/36px
    line-height: 'line-height-900',      // 64px/42px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-50',
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'DisplaySmall': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-800',         // 48px/34px
    line-height: 'line-height-800',      // 56px/40px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-50',
    paragraph-spacing: 'paragraph-spacing-00'
  ),

  // Heading Types
  'Heading2XLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-700',         // 40px/32px
    line-height: 'line-height-700',      // 46px/38px
    font-weight: (400, 600),
    letter-spacing: 'letter-spacing-100', // normal
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'HeadingXLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-600',         // 32px/24px
    line-height: 'line-height-600',      // 38px/32px
    font-weight: (400, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'HeadingLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-500',         // 24px/20px
    line-height: 'line-height-500',      // 32px/26px
    font-weight: (400, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'HeadingMedium': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-400',         // 20px/18px
    line-height: 'line-height-400',      // 26px/24px
    font-weight: (400, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-00'
  ),
  'HeadingSmall': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-300',         // 18px/16px
    line-height: 'line-height-300',      // 24px/22px
    font-weight: (400, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-00'
  ),

  // Body Types
  'BodyLarge': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-200',         // 16px
    line-height: 'line-height-200',      // 24px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-400' // 12px
  ),
  'BodyMedium': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-100',         // 14px
    line-height: 'line-height-100',      // 20px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-300' // 11px
  ),
  'BodySmall': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-50',          // 12px
    line-height: 'line-height-75',       // 18px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-200' // 10px
  ),
  'BodyXSmall': (
    font-family: map.get($font-family, 'text'),
    font-size: 'font-size-25',          // 10px
    line-height: 'line-height-25',       // 14px
    font-weight: (400, 500, 600),
    letter-spacing: 'letter-spacing-100',
    paragraph-spacing: 'paragraph-spacing-100' // 8px
  )
);

// Function to get weight name
@function get-weight-name($weight) {
  @if $weight == 400 {
    @return 'Regular';
  } @else if $weight == 500 {
    @return 'Medium';
  } @else if $weight == 600 {
    @return 'Semibold';
  }
  @return '';
}

// Generate Type Scale Classes
@each $type, $styles in $type-scale-large {
  @each $weight in map.get($styles, 'font-weight') {
    .#{$type}#{get-weight-name($weight)} {
      // Base styles
      font-family: map.get($styles, 'font-family');
      
      // Extend base utility classes
      @extend .#{map.get($styles, 'font-size')};
      @extend .#{map.get($styles, 'line-height')};
      @extend .font-weight-#{$weight};
      @extend .#{map.get($styles, 'paragraph-spacing')};

      // Special handling for letter spacing in Display types
      @if $type == 'DisplayXLarge' or $type == 'DisplayLarge' 
      or $type == 'DisplayMedium' or $type == 'DisplaySmall' {
        @if $weight == 400 or $weight == 500 {
          @extend .letter-spacing-50;    // -1px
        } @else {
          @extend .letter-spacing-100;    // normal
        }
      } @else {
        @extend .#{map.get($styles, 'letter-spacing')};
      }
    }
  }
}

// ====================================================== Fluid Typography SCSS Start ================================================

// fluid typography for smoother scaling between breakpoints
@mixin fluid-type(     
  $min-font-size,
  $max-font-size,
  $min-vw: 320,
  $max-vw: 1200   // can be 1600 as well
) {
  font-size: clamp(
    pxToRem($min-font-size),
    calc(
      #{$min-font-size}px + (#{$max-font-size} - #{$min-font-size}) *
        ((100vw - #{$min-vw}px) / (#{$max-vw} - #{$min-vw}))
    ),
    pxToRem($max-font-size)
  );
}

// Usage example of fluid typography    
.fluid-text {       
  @include fluid-type(16, 32);
}
